# Generated by Django 4.0.1 on 2022-03-07 10:31

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dispatcher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dispatcher_telegram_id', models.BigIntegerField(verbose_name='Диспетчер Telegram ID')),
                ('dispatcher_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Имя диспетчера')),
            ],
            options={
                'verbose_name': 'Диспетчер',
                'verbose_name_plural': 'Диспетчеры',
            },
        ),
        migrations.CreateModel(
            name='Kuryer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kuryer_telegram_id', models.BigIntegerField(verbose_name='Курьер Telegram ID')),
                ('kuryer_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Имя курьера')),
            ],
            options={
                'verbose_name': 'Курьер',
                'verbose_name_plural': 'Курьеры',
            },
        ),
        migrations.CreateModel(
            name='Kuryer_group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kuryer_id', models.BigIntegerField(verbose_name='Kuryer group ID')),
            ],
            options={
                'verbose_name': 'Kuryer group',
                'verbose_name_plural': 'Kuryer group',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_id', models.BigIntegerField(blank=True, verbose_name='Оператор ID')),
                ('partner', models.CharField(blank=True, default='', max_length=100, verbose_name='Партнер')),
                ('admin_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Имя оператора')),
                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Дата')),
                ('type_delever', models.CharField(blank=True, default='', max_length=100, verbose_name='ТИП ДОСТАВКА')),
                ('name_model', models.CharField(blank=True, default='', max_length=300, verbose_name='Наименование товара')),
                ('pay', models.CharField(blank=True, default='', max_length=100, verbose_name='ТИП ОПЛАТЫ')),
                ('price', models.CharField(blank=True, default='', max_length=100, verbose_name='Сумма')),
                ('name_customer', models.CharField(blank=True, default='', max_length=100, verbose_name='Имя клиента')),
                ('phone_customer', models.CharField(blank=True, default='', max_length=100, verbose_name='Телефонный номер')),
                ('date_delever', models.CharField(blank=True, default='', max_length=500, verbose_name='Срок поставки')),
                ('from_location', models.CharField(blank=True, default='', max_length=500, verbose_name='Куда доставить')),
                ('to_location', models.CharField(blank=True, default='', max_length=500, verbose_name='Откуда забрать')),
                ('shop', models.CharField(blank=True, default='', max_length=100, verbose_name='Магазин')),
                ('comment', models.CharField(blank=True, default='', max_length=512, verbose_name='Комментарий')),
                ('status', models.CharField(blank=True, default='', max_length=512, verbose_name='Статус')),
                ('kuryer', models.CharField(blank=True, default='', max_length=512, verbose_name='Курьер')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partner', models.CharField(default='', max_length=512, verbose_name='Партнер')),
            ],
            options={
                'verbose_name': 'Партнер',
                'verbose_name_plural': 'Партнеры',
            },
        ),
        migrations.CreateModel(
            name='Permisson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agree', models.BooleanField(default=False, verbose_name='Пусть бот работает на всех')),
            ],
            options={
                'verbose_name': 'Разрешение',
                'verbose_name_plural': 'Разрешение',
            },
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_id', models.BigIntegerField()),
                ('step', models.BigIntegerField(blank=True, default=1)),
                ('type_delever', models.CharField(blank=True, default='', max_length=100, verbose_name='ТИП ДОСТАВКА')),
                ('name_model', models.CharField(blank=True, default='', max_length=300, verbose_name='Mahsulot nomi')),
                ('pay', models.CharField(blank=True, default='', max_length=100, verbose_name='To`lov usuli')),
                ('price', models.CharField(blank=True, default='', max_length=100, verbose_name='Summa')),
                ('name_customer', models.CharField(default='', max_length=100, verbose_name='Mijoz ismi')),
                ('phone_customer', models.CharField(blank=True, default='', max_length=100, verbose_name='Telefon raqami')),
                ('date_delever', models.CharField(blank=True, default='', max_length=100, verbose_name='Yetkazib berish vaqti')),
                ('from_location', models.CharField(blank=True, default='', max_length=500, verbose_name='Qayerdan')),
                ('to_location', models.CharField(blank=True, default='', max_length=500, verbose_name='Qayerga')),
                ('shop', models.CharField(blank=True, default='', max_length=100, verbose_name='Do`kon')),
                ('comment', models.CharField(blank=True, default='', max_length=512, verbose_name='Kamentariya')),
            ],
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop', models.CharField(default='', max_length=512, verbose_name='Магазин')),
                ('location', models.CharField(default='https://yandex.ru/maps/?pt=longitude,latitude&z=18&l=map', max_length=512, verbose_name='Локация')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nesu.partner', verbose_name='Партнер')),
            ],
            options={
                'verbose_name': 'Магазин',
                'verbose_name_plural': 'Магазины',
            },
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, verbose_name='Имя оператора')),
                ('telegram_id', models.BigIntegerField(verbose_name='Оператор ID')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nesu.partner', verbose_name='Партнер')),
            ],
            options={
                'verbose_name': 'Оператор',
                'verbose_name_plural': 'Операторы',
            },
        ),
        migrations.CreateModel(
            name='Customuser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('partner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='nesu.partner', verbose_name='Партнер')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

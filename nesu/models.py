from datetime import timedelta, date

from django.contrib.auth.models import AbstractUser
from django.db import models
from django.db.models import Q
from django.utils.datetime_safe import date

from confcontrol.models import *
from django.db.models.signals import post_save, pre_delete
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Update, Bot
from config.settings import NESU_TOKEN
from django.dispatch import receiver


def inform(obj):
    info = f"<strong>–ù–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∞:</strong> {obj.id}\n"
    info += f"<strong>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∞:</strong> {obj.type_delever1}\n"
    info += f"<strong>–¢–æ–≤–∞—Ä:</strong> {obj.name_model}\n"
    info += f"<strong>–¢–∏–ø –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è:</strong> {obj.type_pay}\n"
    info += f"<strong>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</strong> {obj.pay}\n"
    if obj.price == "":
        pass
    else:
        info += f"<strong>–°—É–º–º–∞:</strong> {obj.price}\n"
    info += f"<strong>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</strong> {obj.name_customer}\n"
    info += f"<strong>–ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:</strong> {obj.phone_customer}\n"
    info += f"<strong>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: </strong>{obj.date_delever}\n"
    if obj.weight <= 5:
        info += "<strong>–í–µ—Å –¢–æ–≤–∞—Ä–∞: </strong>0.1-5 –ö–≥\n"
    elif obj.weight <= 10:
        info += "<strong>–í–µ—Å –¢–æ–≤–∞—Ä–∞: </strong>5.1-10 –ö–≥\n"
    elif obj.weight <= 20:
        info += "<strong>–í–µ—Å –¢–æ–≤–∞—Ä–∞: </strong>10.1-20 –ö–≥\n"

    if obj.to_location[:5] == "https":
        info += f"<strong>–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å:</strong> <a href='{obj.to_location}'>–õ–æ–∫–∞—Ü–∏—è</a>\n"
    else:
        info += f"<strong>–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å:</strong> {obj.to_location}\n"
    if obj.from_location[:5] == "https":
        info += f"<strong>–û—Ç–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å:</strong> <a href='{obj.from_location}'>{obj.shop}</a>\n"
    else:
        info += f"<strong>–û—Ç–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å:</strong> {obj.from_location}\n"

    if obj.comment == "":
        pass
    else:
        info += f"<strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</strong> {obj.comment}\n"
    info += f"<strong>–ü–∞—Ä—Ç–Ω–µ—Ä:</strong> {obj.partner}\n"
    info += f"<strong>–û–ø–µ—Ä–∞—Ç–æ—Ä:</strong> {obj.admin_name}"
    return info


class Kuryer_step(models.Model):
    admin_id = models.BigIntegerField()
    step = models.BigIntegerField(default=0, blank=True)
    obj = models.BigIntegerField(default=0, blank=True)


class Disp_step(models.Model):
    admin_id = models.BigIntegerField()
    step = models.BigIntegerField(default=0, blank=True)
    obj = models.BigIntegerField(default=0, blank=True)


class Step(models.Model):
    admin_id = models.BigIntegerField()
    step = models.BigIntegerField(default=1, blank=True)
    type_delever = models.CharField(default="", max_length=100, verbose_name="–¢–ò–ü –î–û–°–¢–ê–í–ö–ê", blank=True)
    type_delever1 = models.CharField(default="", max_length=100, verbose_name="–¢–ò–ü –î–û–°–¢–ê–í–ö–ê1", blank=True)
    name_model = models.CharField(default="", max_length=300, verbose_name="Mahsulot nomi", blank=True)
    pay = models.CharField(default="", max_length=100, verbose_name="To`lov usuli", blank=True)
    type_pay = models.CharField(default="", max_length=100, verbose_name="–¢–ò–ü –ü–†–ò–û–ë–†–ï–¢–ï–ù–ò–Ø", blank=True)
    price = models.CharField(default="", max_length=100, verbose_name="Summa", blank=True)
    name_customer = models.CharField(default="", max_length=100, verbose_name="Mijoz ismi")
    phone_customer = models.CharField(default="", max_length=100, verbose_name="Telefon raqami", blank=True)
    date_delever = models.CharField(default="", max_length=100, verbose_name="Yetkazib berish vaqti", blank=True)
    from_location = models.CharField(default="", max_length=500, verbose_name="Qayerdan", blank=True)
    to_location = models.CharField(default="", max_length=500, verbose_name="Qayerga", blank=True)
    shop = models.CharField(default="", max_length=100, verbose_name="Do`kon", blank=True)
    weight = models.IntegerField(verbose_name="–ú–∞—Å—Å–∞", default=0)
    comment = models.CharField(default="", max_length=512, verbose_name="Kamentariya", blank=True)


class Order(models.Model):
    admin_id = models.BigIntegerField(verbose_name="–û–ø–µ—Ä–∞—Ç–æ—Ä ID")
    partner = models.CharField(max_length=100, verbose_name="–ü–∞—Ä—Ç–Ω–µ—Ä")
    api = models.BooleanField(null=True)
    admin_name = models.CharField(max_length=100, verbose_name="–ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    datetime = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞")
    type_delever = models.CharField(max_length=100, verbose_name="–¢–ò–ü –î–û–°–¢–ê–í–ö–ê")
    type_delever1 = models.CharField(max_length=100, verbose_name="–ü–ï–†–°–û–ù–ê–õ–ù–´–ô –¢–ò–ü –î–û–°–¢–ê–í–ö–ê", null=True, blank=True)
    multi = models.BooleanField(default=False, verbose_name="–ú–£–õ–¢–ò–î–û–°–¢–ê–í–ö–ê")
    name_model = models.CharField(max_length=300, verbose_name="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    pay = models.CharField(max_length=100, verbose_name="–¢–ò–ü –û–ü–õ–ê–¢–´", blank=True)
    price = models.CharField(default="", max_length=100, verbose_name="–°—É–º–º–∞", blank=True)
    name_customer = models.CharField(max_length=100, verbose_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    phone_customer = models.CharField(max_length=100, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
    date_delever = models.CharField(max_length=500, verbose_name="–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏")
    from_location = models.CharField(max_length=2000, verbose_name="–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å")
    to_location = models.CharField(max_length=2000, verbose_name="–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å")
    type_pay = models.CharField(max_length=100, verbose_name="–¢–ò–ü –ü–†–ò–û–ë–†–ï–¢–ï–ù–ò–Ø")
    shop = models.CharField(max_length=256, verbose_name="–ú–∞–≥–∞–∑–∏–Ω")
    before_image = models.CharField(default="", max_length=100, verbose_name="–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", blank=True)
    after_image = models.CharField(default="", max_length=100, verbose_name="–í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", blank=True)
    comment = models.CharField(default="", max_length=512, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", blank=True)
    status = models.CharField(default="–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω", max_length=512, verbose_name="–°—Ç–∞—Ç—É—Å", blank=True)
    kuryer = models.CharField(default="", max_length=512, verbose_name="–ö—É—Ä—å–µ—Ä", blank=True)
    parent_delevery = models.CharField(default="", max_length=512, verbose_name="–ö–æ—Ä–∑–∏–Ω–∫–∞", blank=True)
    multiorder = models.CharField(default="", max_length=512, verbose_name="–ú—É–ª—Ç–∏–∑–∞–∫–∞–∑", blank=True)
    step = models.BigIntegerField(default=0, blank=True)
    # Do`kondan chiqdimi
    shop_came = models.BooleanField(default=False)
    # Dispatcher comment
    dis_comment = models.CharField(default="", max_length=512, verbose_name="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", blank=True)
    delete_message_id = models.BigIntegerField(default=0, blank=True)
    a = models.IntegerField(verbose_name="–¶–µ–Ω–∞ –ø—É–Ω–∫—Ç–∞ A", default=0)
    b = models.IntegerField(verbose_name="–¶–µ–Ω–∞ –ø—É–Ω–∫—Ç–∞ B", default=0)
    b1 = models.IntegerField(verbose_name="–¶–µ–Ω–∞ –ø—É–Ω–∫—Ç–∞ B(0.1-5 –ö–≥)", default=0)
    b2 = models.IntegerField(verbose_name="–¶–µ–Ω–∞ –ø—É–Ω–∫—Ç–∞ B(5.1-10 –ö–≥)", default=0)
    b3 = models.IntegerField(verbose_name="–¶–µ–Ω–∞ –ø—É–Ω–∫—Ç–∞ B(10.1-20 –ö–≥)", default=0)
    weight = models.FloatField(verbose_name="–ú–∞—Å—Å–∞", default=0)
    comis = models.IntegerField(verbose_name="–ö–æ–º–∏—Å—Å–∏—è NesuVezu %", default=0)
    done_time = models.CharField(default="", blank=True, max_length=521, verbose_name="–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏")

    @property
    def price_partner(self):
        price = 0
        full = 0
        if (self.status == "üîÅ–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞" or self.status == "‚úÖ–ó–∞–≤–µ—Ä—à–µ–Ω" or self.status == "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω"
        ) and str(self.type_delever)[0] == "A":
            obj = Order.objects.get(pk=self.pk)
            obj = obj.parent_delevery.split(" ")
            if obj[0] == "":
                obj = obj[1:]
            for i in obj:
                if "B" in Order.objects.get(pk=i).type_delever1:
                    price += int(Order.objects.get(pk=i).b)
                if Order.objects.get(pk=i).status not in ["üîÅ–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞", "‚úÖ–ó–∞–≤–µ—Ä—à–µ–Ω", "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω"]:
                    full += 1
            objk = str(self.type_delever).split("-")
            price += objk.count("A") * int(self.a)
            if "B" in str(self.type_delever1):
                price += int(self.b)
            if full > 0:
                return 0
            return price
        else:
            return price

    price_partner.fget.short_description = "–û–ø–ª–∞—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"

    def __str__(self):
        return self.name_model

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"


class Message(models.Model):
    short_disc = models.CharField(verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=256)
    message = models.TextField(verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ")
    image = models.ImageField(null=True, blank=True, verbose_name="–§–æ—Ç–æ")
    operator = models.BooleanField(default=False, verbose_name="–û–ø–µ—Ä–∞—Ç–æ—Ä")
    dispatcher = models.BooleanField(default=False, verbose_name="–î–∏—Å–ø–µ—Ç—á–µ—Ä")
    kuryer = models.BooleanField(default=False, verbose_name="–ö—É—Ä—å–µ—Ä")

    def __str__(self):
        return self.short_disc

    class Meta:
        verbose_name = "–°–æ–æ–±—â–µ–Ω–∏–µ"
        verbose_name_plural = "–°–æ–æ–±—â–µ–Ω–∏—è"


class Pay_kuryer(models.Model):
    kuryer = models.ForeignKey(Kuryer, on_delete=models.CASCADE, verbose_name="–ö—É—Ä—å–µ—Ä", null=True, blank=True)
    datetime = models.DateField(verbose_name="–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥")
    datetime_apply = models.DateField(null=True, verbose_name="–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥")

    @property
    def price(self):
        if self.kuryer.kuryer_name == "–ò–¢–û–ì–û":
            total_price = []
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                total_price.append(int(i.price_partner) * (1 - (int(i.comis) / 100)))
            return sum(total_price)

        else:
            total_price = []
            obj = Order.objects.filter(kuryer=self.kuryer.kuryer_name,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                total_price.append(int(i.price_partner) * (1 - (int(i.comis) / 100)))
            return sum(total_price)

    price.fget.short_description = "–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ"

    @property
    def total(self):
        if self.kuryer.kuryer_name == "–ò–¢–û–ì–û":
            total = 0
            obj = Order.objects.filter(Q(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)]))
            for i in obj:
                if i.price_partner > 0:
                    obj = i.parent_delevery.split(" ")
                    if obj[0] == "":
                        obj = obj[1:]
                    total += len(obj) + 1
            return total

        else:
            total = 0
            obj = Order.objects.filter(kuryer=self.kuryer.kuryer_name,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])

            for i in obj:
                if i.price_partner > 0:
                    obj = i.parent_delevery.split(" ")
                    if obj[0] == "":
                        obj = obj[1:]
                    total += len(obj) + 1
            return total

    total.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"

    class Meta:
        verbose_name = "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä–∞–º"
        verbose_name_plural = "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä–∞–º"

    @property
    def average_time(self):
        if self.kuryer.kuryer_name == "–ò–¢–û–ì–û":
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            h = 0
            m = 0
            for i in obj:
                if len(i.done_time) > 0:
                    time = i.done_time.split(":")
                    m += int(time[1])
                    if len(time[0]) > 2:
                        a = time[0].split(",")
                        try:
                            h += int(a[1])
                        except:
                            pass
                        a = a[0].split("days")
                        a = a[0].split("day")
                        try:
                            h += (int(a[0]) * 24)
                        except:
                            pass

                    else:
                        h += int(time[0])
            m += h * 60
            try:
                average = m // len(obj)
                av = average % 60
                if len(str(av)) < 2:
                    av = f"0{av}"
            except:
                average = 0
                av = "00"

            return f"{average // 60}:{av}"


        else:
            obj = Order.objects.filter(kuryer=self.kuryer.kuryer_name,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            h = 0
            m = 0
            for i in obj:
                if len(i.done_time) > 0:
                    time = i.done_time.split(":")
                    m += int(time[1])
                    if len(time[0]) > 2:
                        a = time[0].split(",")
                        try:
                            h += int(a[1])
                        except:
                            pass
                        a = a[0].split("days")
                        a = a[0].split("day")
                        try:
                            h += (int(a[0]) * 24)
                        except:
                            pass

                    else:
                        h += int(time[0])
            m += h * 60
            try:
                average = m // len(obj)
                av = average % 60
                if len(str(av)) < 2:
                    av = f"0{av}"
            except:
                average = 0
                av = "00"

            return f"{average // 60}:{av}"

    average_time.fget.short_description = "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"

    @property
    def total_a(self):
        if self.kuryer.kuryer_name == "–ò–¢–û–ì–û":
            total_a = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    total_a += i.type_delever.count("A")
            return total_a

        else:
            total_a = 0
            obj = Order.objects.filter(kuryer=self.kuryer.kuryer_name,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    total_a += i.type_delever.count("A")
            return total_a

    total_a.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ –ê"

    @property
    def total_1(self):
        if self.kuryer.kuryer_name == "–ò–¢–û–ì–û":
            total_b = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b1) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b1) > 0:
                            total_b += 1
            return total_b

        else:
            total_b = 0
            obj = Order.objects.filter(kuryer=self.kuryer.kuryer_name,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b1) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b1) > 0:
                            total_b += 1
            return total_b

    total_1.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ B (0.1-5 –ö–≥)"

    @property
    def total_2(self):
        if self.kuryer.kuryer_name == "–ò–¢–û–ì–û":
            total_b = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b2) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b2) > 0:
                            total_b += 1
            return total_b

        else:
            total_b = 0
            obj = Order.objects.filter(kuryer=self.kuryer.kuryer_name,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b2) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b2) > 0:
                            total_b += 1
            return total_b

    total_2.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ B (5.1-10 –ö–≥)"

    @property
    def total_3(self):
        if self.kuryer.kuryer_name == "–ò–¢–û–ì–û":
            total_b = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b3) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b3) > 0:
                            total_b += 1
            return total_b

        else:
            total_b = 0
            obj = Order.objects.filter(kuryer=self.kuryer.kuryer_name,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b3) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b3) > 0:
                            total_b += 1
            return total_b

    total_3.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ B (10.1-20 –ö–≥)"

    def __str__(self):
        return f"{self.kuryer} –æ–ø–ª–∞—Ç–∞"


class Pay_partner(models.Model):
    partner = models.ForeignKey(Partner, on_delete=models.CASCADE, verbose_name="–ü–∞—Ä—Ç–Ω–µ—Ä", null=True, blank=True)
    datetime = models.DateField(verbose_name="–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥")
    datetime_apply = models.DateField(null=True, verbose_name="–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥")

    @property
    def total(self):
        if self.partner.partner == "–ò–¢–û–ì–û":
            total = 0
            obj = Order.objects.filter(Q(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)]))
            for i in obj:
                if i.price_partner > 0:
                    obj = i.parent_delevery.split(" ")
                    if obj[0] == "":
                        obj = obj[1:]
                    total += len(obj) + 1
            return total

        else:
            total = 0
            obj = Order.objects.filter(Q(partner=self.partner.partner) &
                                       Q(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)]))
            for i in obj:
                if i.price_partner > 0:
                    obj = i.parent_delevery.split(" ")
                    if obj[0] == "":
                        obj = obj[1:]
                    total += len(obj) + 1
            return total

    total.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"

    class Meta:
        verbose_name = "–û–ø–ª–∞—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
        verbose_name_plural = "–û–ø–ª–∞—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"

    @property
    def price(self):
        if self.partner.partner == "–ò–¢–û–ì–û":
            total_price = []
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                total_price.append(int(i.price_partner))
            return sum(total_price)

        else:
            total_price = []
            obj = Order.objects.filter(partner=self.partner.partner,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                total_price.append(int(i.price_partner))
            return sum(total_price)

    price.fget.short_description = "–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ"

    @property
    def total_a(self):
        if self.partner.partner == "–ò–¢–û–ì–û":
            total_a = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    total_a += i.type_delever.count("A")
            return total_a

        else:
            total_a = 0
            obj = Order.objects.filter(partner=self.partner.partner,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    total_a += i.type_delever.count("A")
            return total_a

    total_a.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ –ê"

    def __str__(self):
        return f"{self.partner} –æ–ø–ª–∞—Ç–∞"

    @property
    def total_1(self):
        if self.partner.partner == "–ò–¢–û–ì–û":
            total_b = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b1) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b1) > 0:
                            total_b += 1

            return total_b

        else:
            total_b = 0
            obj = Order.objects.filter(partner=self.partner.partner,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b1) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(Order.objects.get(pk=int(idd)).b1) > 0:
                            total_b += 1

            return total_b

    total_1.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ B (0.1-5 –ö–≥)"

    @property
    def total_2(self):
        if self.partner.partner == "–ò–¢–û–ì–û":
            total_b = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b2) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b2) > 0:
                            total_b += 1

            return total_b

        else:
            total_b = 0
            obj = Order.objects.filter(partner=self.partner.partner,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b2) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b2) > 0:
                            total_b += 1

            return total_b

    total_2.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ B (5.1-10 –ö–≥)"

    @property
    def total_3(self):
        if self.partner.partner == "–ò–¢–û–ì–û":
            total_b = 0
            obj = Order.objects.filter(datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b3) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b3) > 0:
                            total_b += 1
            return total_b

        else:
            total_b = 0
            obj = Order.objects.filter(partner=self.partner.partner,
                                       datetime__range=[self.datetime, self.datetime_apply + timedelta(days=1)])
            for i in obj:
                if int(i.price_partner) > 0:
                    if "B" in str(i.type_delever1) and int(i.b3) > 0:
                        total_b += 1
                    objk = i.parent_delevery.split(" ")
                    if objk[0] == "":
                        objk = objk[1:]
                    for idd in objk:
                        if "B" in str(Order.objects.get(pk=int(idd)).type_delever1) and int(
                                Order.objects.get(pk=int(idd)).b3) > 0:
                            total_b += 1
            return total_b

    total_3.fget.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∞ B (10.1-20 –ö–≥)"


class Customuser(AbstractUser):
    partner = models.ForeignKey(Partner, on_delete=models.CASCADE, verbose_name="–ü–∞—Ä—Ç–Ω–µ—Ä", null=True, blank=True)
    telegram_id = models.BigIntegerField(verbose_name="–¢–µ–ª–µ–≥—Ä–∞–º ID", null=True, blank=True)


bot = Bot(token=NESU_TOKEN)


@receiver(post_save, sender=Order)
def post_save_order(sender, instance, created, *args, **kwargs):
    if created and instance.api:
        kuryer = Kuryer.objects.filter(inwork=True)
        kuryer_group = Kuryer_group.objects.all()
        disp = Dispatcher.objects.all()
        button = []
        for i in range(1, len(kuryer), 2):
            if len(kuryer) > 1:
                button.append([InlineKeyboardButton(f"{kuryer[i - 1].kuryer_name}",
                                                    callback_data=f"{instance.id}_{kuryer[i - 1].id}_kuryer"),
                               InlineKeyboardButton(f"{kuryer[i].kuryer_name}",
                                                    callback_data=f"{instance.id}_{kuryer[i].id}_kuryer")])
        if len(kuryer) % 2 == 1:
            button.append([InlineKeyboardButton(f"{kuryer[len(kuryer) - 1].kuryer_name}",
                                                callback_data=f"{instance.id}_{kuryer[len(kuryer) - 1].id}_kuryer")])
        button.append([InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å",
                                            callback_data=f"{instance.id}_update")])
        button.append([InlineKeyboardButton(f"‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                            callback_data=f"{instance.id}_cancelapply")])

        for i in kuryer_group:
            bot.send_message(chat_id=i.kuryer_id, parse_mode="HTML", disable_web_page_preview=True,
                             text=f"{inform(instance)}")

        for i in disp:
            bot.send_message(chat_id=i.dispatcher_telegram_id, parse_mode="HTML",
                             disable_web_page_preview=True,
                             text=f"{inform(instance)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ö–£–†–¨–ï–† üëá",
                             reply_markup=InlineKeyboardMarkup(button))


@receiver(post_save, sender=Message)
def post_seve_order(sender, instance, created, *args, **kwargs):
    if created:
        operator = Operator.objects.all()
        group = Kuryer_group.objects.all()
        kuryer = Kuryer.objects.all()
        dispatcher = Dispatcher.objects.all()
        if instance.operator:
            for i in operator:
                try:
                    try:
                        bot.send_photo(chat_id=i.telegram_id,
                                       photo=open(f"media/{instance.image}", "rb"), caption=instance.message)
                    except:
                        bot.send_message(chat_id=i.telegram_id,
                                         text=instance.message)
                except:
                    pass

        if instance.kuryer:
            for i in kuryer:
                try:
                    try:
                        bot.send_photo(chat_id=i.kuryer_telegram_id,
                                       photo=open(f"media/{instance.image}", "rb"), caption=instance.message)
                    except:
                        bot.send_message(chat_id=i.kuryer_telegram_id,
                                         text=instance.message)
                except:
                    pass

        if instance.dispatcher:
            for i in dispatcher:
                try:
                    try:
                        bot.send_photo(chat_id=i.dispatcher_telegram_id,
                                       photo=open(f"media/{instance.image}", "rb"), caption=instance.message)
                    except:
                        bot.send_message(chat_id=i.dispatcher_telegram_id,
                                         text=instance.message)
                except:
                    pass

        for i in group:
            try:
                try:
                    bot.send_photo(chat_id=i.kuryer_id,
                                   photo=open(f"media/{instance.image}", "rb"), caption=instance.message)
                except:
                    bot.send_message(chat_id=i.kuryer_id,
                                     text=instance.message)
            except:
                pass
